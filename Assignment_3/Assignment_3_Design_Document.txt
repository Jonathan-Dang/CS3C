Foreword: I see no point in having individual design documents as it takes significantly longer to obtain a peer review as well as
for the professor to review all the documents included per student. I have taken it upon myself to create a 
combined assignment design document to allow for ease of review. Hopefully this causes no problems later down the road.
-Jonathan Dang

Part 1: Problem Analysis| 
    View and Flip:
        Generally speaking, the problem states that we must translate the documentation of
        Ezgraphics to PIL. We must be able to view an image and then be able to flip it 
        horizontally, as is to say to flip it across it's x-axis
    PP4-2:
        Input:
            A string of chars, ints, or symbols.
        Output:
            a.The smallest and largest of the inputs.
            b.The number of even and odd inputs.
            c.Cumulative totals. For example, if the input is 1 7 2 9, the program should print 1 8 10 19. 
            d.All adjacent duplicates. For example, if the input is 1 3 3 4 5 5 6 6 6 2, the program should print 3 5 6.
    PP4-3:
        Input:
            A string that is ended with a \n.
        Output:
            a.Only the uppercase letters in the string. √
            b.Every second letter of the string. √
            c.The string, with all vowels replaced by an underscore. √
            d.The number of digits in the string. √
            e.The positions of all vowels in the string. √
    PP4-9:
        Input:
            A singular word
        Output:
            The given word but printed backwards.

Part 2: Test Cases |
    View and Flip:
        For the portion regarding viewing the image, we have done this in the lab. 
        Lets say we have an image file type JPG, we would obtain the static directory and the file name
        of the picture and then open it to view it. To flip it, we would just have to place the 
        pixels of the picture into the opposite side of the image and save it to disk.
    PP4-2:
        Lets say we have the sample input of numberes 0 through 10. We input our values
        ending with an x character. Over the course of the interations, we would have recorded
        and created a summation of all inputs done. This is for the sum. We would keep track
        of the smallest value within the set by a comparison of the current input and the last
        known smallest value. This process is the same with the largest value. For evens and
        odds, we have to use the modulus operator to find out whether or not it produces a value.
        Evens are defined as being divisible by 2 and leaving no remainder, while Odds are 
        defined by leaving a remainder of 1 when divided by 2. Now, for the adjacent duplicates,
        we must keep track of the previous input, skipping the first input. We would compare the
        current value to the previous value, recording it if it is a duplicate. 
    PP4-3:
        Given the test string "Lets Goooo!", we must obtain every capital letter. Iterating through
        the string and checking for caps is easy enough to make. Then we need to process each second letter.
        Assuming that each word is either the first word or a word seperated by spaces, we can just take
        the second letter that way. Then, we have to obtain the digits of the string. We can do this by checking
        every letter with the .isDigit() method.
    PP4-9:
        Lets say we have the word Harry. We would obtain the string and then place it in a stack like structure.
        This enables us to pop the stack in reverse order.

Part 3: Pseudo-Code |
    View and Flip:
        View:
            Find the directory and file name and pass it into PIL's image and call Show.
        Flip:
            First obtain the directory and load it into a 2d pixel array. Then we must spawn another image file.
            We then place the pixels into the new image, flipping the horizontal pixels.
    PP4-2:
        First, we must create a while loop to repeat the process until a sentinel is submitted. Then, we would 
        process the series of input as smallest, largest, sum, evens, odds, and adjacenties. Smallest and largest
        are processed by comparing whats in memory with the most recent input. The sum is added every time an 
        integer is placed. We tick up the even and odd variables every time we see each respective type.
        The duplicates, we must keep track of the previous entry, then compare the current entry with the previous.
        If it is the same, record it and continue.
        Lastly, we must print out our recordings and repeat.
    PP4-3:
        First, we must create an infinite loop to repeat the program until a sentinel is entered.
        Then we must declare all the vowels, upper and lower, as constants. Then we run down the string
        comparing every letter to the vowels. While we do this, we can record whether or not the 
        character is uppercase, we save it if it is, and check if the character is a digit.
        Lastly, we must keep track of our second letters. We defined it as the 2nd letter of a word
        that is either the first word of the string or a word that was seperated with spaces.
    PP4-9:
        First, like the others, we must create an infinite loop to repeat the program until a sentinel is entered.
        Then we place the string into a list, in reverse by using the insert method at position 0 every time.
        This makes the list act like a stack, as I read the list from index 0 to the end of the list.
        Then all we need is to print it to screen.

Part 4: Variables |
    View and Flip:
        